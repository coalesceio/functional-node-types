{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : Match Recognize NODE == #}
{# == Node Type Description    : The Match Recognize node type uses Snowflake SQL MATCH_RECOGNIZE clause to identify and process patterns in datasets(https://docs.snowflake.com/en/sql-reference/constructs/match_recognize). It helps identify events, trends, and anomalies by analyzing rows in sequence. It is useful for tasks like fraud detection, session tracking, and clickstream analysis, with options to customize patterns for different needs. == #}



{% if desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}
       {{ stage('Drop Table or View') }}
       DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}    
       {{ stage('Drop ' + currentState.node.materializationType) }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}
    {% endif %}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %} 

              {%if currentState != defined and currentState.node.materializationType != desiredState.node.materializationType %}


                     {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                     {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% endif %}

                {%endif%}
				
			{%if desiredState.config.inferMatchRecognize == false %}	
			   {{ stage('Create  Match Recognize '+ ' {{desiredState.node.materializationType}}' , true, "sql", "create") }}
               CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
                (
                {% for col in desiredState.columns %}
                    "{{ col.name }}" {{ col.dataType }}
                    {%- if not col.nullable %} NOT NULL
                        {%- if col.defaultValue | length > 0 %} DEFAULT {{ col.defaultValue }}{% endif %}
                    {% endif %}
                    {%- if col.description | length > 0 %} COMMENT '{{ col.description | escape }}'{% endif %}
                    {%- if not loop.last -%}, {% endif %}
                {% endfor %}
                )
               {%- if desiredState.node.description | length > 0 %} COMMENT = '{{ desiredState.node.description | escape }}'{% endif %}

			{%- else -%}	
				
	{%- set ns = namespace(measureExpression = [],measureColumn=[],defineExpression=[],defineColumn =[],aliasExpressionColumn=[],varPartitionByColDropDown = [],varOrderByColDropDown=[],varSelectOrderByColDropDown=[],varPartitionByColText = [],varOrderByColText=[],varSelectOrderByColText=[]) %}
      
	 {% if desiredState.config.togglePartitionBy == true %}
     {%set ns.varPartitionByColDropDown = desiredState.config.partitionBy.get('items') | map(attribute='partitionByCol.name') | list%}
 	 {%set ns.varPartitionByColText = desiredState.config.partitionBy.get('items') | map(attribute='partitionByColTextBox') | list%}
     {% endif %}
	 {% if desiredState.config.toggleOrderBy == true %}
	 {%set ns.varOrderByColDropDown = desiredState.config.orderBy.get('items') | map(attribute='orderByCol.name') | list%}
 	 {%set ns.varOrderByColText = desiredState.config.orderBy.get('items') | map(attribute='orderByTextBox') | list%}
     {% endif %}
	 {% if desiredState.config.toggleSelectOrderBy == true %}
	 {%set ns.varSelectOrderByColDropDown = desiredState.config.selectOrderBy.get('items') | map(attribute='selectOrderByCol.name') | list%}
 	 {%set ns.varSelectOrderByColText = desiredState.config.selectOrderBy.get('items') | map(attribute='selectOrderByTextBox') | list%}
	 {% endif %}
	 
	 {%set ns.measureExpression = desiredState.config.tabMeasures.get('items') | map(attribute='valMeasureExpression') | list%}
     {%set ns.measureColumn = desiredState.config.tabMeasures.get('items') | map(attribute='valMeasureColumnName') | list%}
     {%set ns.aliasExpressionColumn = desiredState.config.tabMeasures.get('items') | map(attribute='valAliasExpressionColumnName') | list%}
     
	 {%set ns.defineExpression = desiredState.config.tabDefine.get('items') | map(attribute='valDefineExpression') | list%}
     {%set ns.defineColumn = desiredState.config.tabDefine.get('items') | map(attribute='valDefineColumnName') | list%}

	 {% if desiredState.config.toggleSelectFunction == true %}
	 {%set ns.selectFunctionExpression = desiredState.config.tabSelectFunction.get('items') | map(attribute='valSelectFunctionExpression') | list%}
     {%set ns.selectFunctionColumn = desiredState.config.tabSelectFunction.get('items') | map(attribute='valSelectFunctionColumnName') | list%}
     {%set ns.aliasSelectFunctionColumn = desiredState.config.tabSelectFunction.get('items') | map(attribute='valAliasSelectFunctionColumnName') | list%}
     {% endif %}
	 	
     {% set source = desiredState.sources[0] %}        
        {{ stage('Create Match Recognize '+ desiredState.node.materializationType,true, "sql", "create") }}
        CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
        AS( 
			   SELECT 
			{%- if desiredState.config.toggleSelectFunction %}
			{%- for loopColumn in ns.selectFunctionColumn  %}
			   {{ ns.selectFunctionExpression [loop.index0] }} {%- if not '.' in ns.selectFunctionExpression [loop.index0]  -%} 
			   ({%- if loopColumn|trim != 'None' -%} {{loopColumn}}{% endif %})  {% endif %} AS {{ ns.aliasSelectFunctionColumn[loop.index0]}}	{%- if not loop.last -%},{%endif%}
			{%- endfor %}
            {%- else -%} 			
			  *  
			{%- endif %}
			   {{ source.join }}
			   MATCH_RECOGNIZE(              
			{%- for loopColumn in ns.varPartitionByColDropDown -%}
			   {% if loop.first %} 
			   PARTITION BY  
			   {% endif %}
			   {%- if loopColumn|trim == '' -%} 
			   {{ ns.varPartitionByColText[loop.index0]}} 
			   {%- else -%}  
			   {{loopColumn}}  
			   {%- endif -%} {%- if not loop.last -%},{%- endif -%}
			{%- endfor -%}
			{%- for loopColumn in ns.varOrderByColDropDown -%}
			   {% if loop.first %} 
			   ORDER BY  
			   {% endif %}
			   {%- if loopColumn|trim == '' -%} 
			   {{ ns.varOrderByColText[loop.index0]}} 
			   {%- else -%}  
			   {{loopColumn}}  
			   {%- endif -%} {%- if not loop.last -%},{%- endif -%}
			{%- endfor -%}
			{%- for loopColumn in ns.measureColumn  -%}
			   {% if loop.first %} 
			   MEASURES  
			   {%- endif %}
			   {{ ns.measureExpression [loop.index0] }} {%- if not '.' in ns.measureExpression [loop.index0]  -%} 
			   ({%- if loopColumn|trim != 'None' -%} {{loopColumn}}{% endif %})  {% endif %} AS {{ ns.aliasExpressionColumn[loop.index0]}}	{%- if not loop.last -%},{%endif%}
			{%- endfor %}	 			
			   {{ desiredState.config.rowsPerMatch }}   		
            {%- if desiredState.config.afterMatchSkip|trim != '' %}
			   AFTER MATCH SKIP {{desiredState.config.afterMatchSkip}}
            {%- endif %} {{desiredState.config.to}} {{desiredState.config.varAfterMatchSkip}}
			   PATTERN
               ( {{desiredState.config.pattern}} )
               DEFINE
		    {%- for loopColumn in ns.defineColumn %}
			    {{loopColumn}} AS {{ ns.defineExpression [loop.index0] }} {%- if not loop.last -%},{%- endif -%}
			{%- endfor %}
			   )	
           	{% for loopColumn in ns.varSelectOrderByColDropDown %}
			{%- if loop.first -%}
			ORDER BY   
			{% endif %}
			{%- if loopColumn|trim == '' -%} {{ ns.varSelectOrderByColText[loop.index0]}} {%- else -%}  {{loopColumn}}  {%- endif -%}
			{%- if not loop.last -%},{%- endif -%}
			{%- endfor %}
        )
		   {% endif %}

{% endif %}