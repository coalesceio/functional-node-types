{#
    Copyright (c) 2023 Coalesce. All rights reserved.
This script and its associated documentation are confidential and proprietary to Coalesce.
Unauthorized reproduction, distribution, or disclosure of this material is strictly prohibited.
Coalesce permits you to copy and modify this script for the purposes of using with Coalsce but
does not permit copying or modification for any other purpose.  
#}
{# == Node Type Version        : 1  == #}
{# == Node Type Name           : PIVOT NODE == #}
{# == Node Type Description    : This node creates work table,view and also override create sql for view with advanced deployment strategy == #}
{#Release date:20240516 Version:1.0.0#}

{% if desiredState == currentState %}

{{ stage('Nothing to do.') }}
select 1 = 0

{% elif desiredState == undefined %}

    {# Table or View Name #}
    {% set targetObjectDatabase = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[0] %} 
    {% set targetObjectSchema = ref_no_link(currentState.node.location.name, currentState.node.name).split('.')[1] %} 
    {% set fullyQualifiedTargetObjectName = ref_no_link(currentState.node.location.name, currentState.node.name) %}
    
    {% if currentState.node.materializationType == 'view' %}

     {{ stage('Drop Table or View', true, "sql", "drop") }}
     DROP {{ currentState.node.materializationType }} IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% else %}
     
       {{ stage('Drop ' + currentState.node.materializationType , true, "sql", "drop") }}
       DROP TABLE IF EXISTS {{ fullyQualifiedTargetObjectName }}

    {% endif %}

{% elif currentState == undefined or (currentState != undefined and desiredState != currentState) %} 

              {%if currentState != defined %}
              {%if currentState.node.materializationType != desiredState.node.materializationType %}

                     {{ stage('Drop ' + currentState.node.materializationType + ' ' + ref_no_link(currentState.node.location.name, currentState.node.name), true, "sql", "drop") }}

                     {% if currentState.node.materializationType == 'view' %} 
                      DROP {{currentState.node.materializationType}} IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% else %}
                      DROP TABLE IF EXISTS {{ ref_no_link(currentState.node.location.name, currentState.node.name) }}
                     {% endif %}
                {%endif%}
                {%endif%}

{% set source = desiredState.sources[0] %}
{%- set ns = namespace(saggfunctions=[],mggfunctions=[],funcdesc='',filcolval =[],cnt =1,i=0,exclclause =[],fexclclause ="") %}
    
      {%if desiredState.config.sincol == true %}

        {% set ns.saggfunctions = desiredState.config.aggfunc1.get('items') | map(attribute='funcname1') | list%}
         
         # List of columns to be excluded from Pivot query

         {%if desiredState.config.exlcol == true %}

            {% set exclcol = desiredState.config.exlcol.get('items') | map(attribute='exclcol1.name') | list%} 

            {%for col in exclcol%}
              {%set ns.exclclause = ns.exclclause + ['"'+col+'"'] %}
            {%endfor%}
            {%set ns.fexclclause = 'EXCLUDE('+ ns.exclclause | join(',') + ')' %}
         {%endif%}

         
        {{ stage('Create Pivot '+ desiredState.node.materializationType) }}

            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( {%for func in ns.saggfunctions%}
               {%if func == 'SUM'%} 
                 {%set ns.funcdesc = "TOTAL "+ desiredState.config.valCol1.name %}
               {%elif func == 'AVG'%}
                 {%set ns.funcdesc = "AVERAGE "+ desiredState.config.valCol1.name%}
               {%elif func == 'MAX'%}
                 {%set ns.funcdesc = "MAXIMUM "+ desiredState.config.valCol1.name%}
               {%elif func == 'MIN'%}
                 {%set ns.funcdesc = "MINIMUM "+ desiredState.config.valCol1.name%}
               {%elif func == 'COUNT'%}
                 {%set ns.funcdesc = "COUNT OF "+ desiredState.config.valCol1.name%}
                {%endif%}
                SELECT * FROM (SELECT {%if ns.saggfunctions | length >1 %}'{{ns.funcdesc}}' AS aggregate ,{%endif%} *  {%if ns.fexclclause != "" %} {{ ns.fexclclause}} {%endif%}
                 {{ source.join }} )
              PIVOT({{func}}({{desiredState.config.valCol1.name}}) FOR {{desiredState.config.keyCol.name}} IN ( {%if desiredState.config.subqueryval1 !="" %}
                 {{desiredState.config.subqueryval1}}
                {%elif desiredState.config.Colvol1 != "" %}
                   {{desiredState.config.Colvol1}}  
                {%else%}
                ANY ORDER BY {{desiredState.config.keyCol.name}}
                {%endif%})
                {%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%}
                ) 
                {%- if not loop.last -%} UNION {% endif %}
                {%endfor%}
                )
        {%elif desiredState.config.mulcol == true %}
               # Multiple Pivot Columns
            {% set pcolumn, functions,subquery,filcol = desiredState.config.aggfunc.get('items') | map(attribute='valCol.name') | list, desiredState.config.aggfunc.get('items') | map(attribute='funcname') | list,desiredState.config.aggfunc.get('items') | map(attribute='subqueryval') | list,desiredState.config.aggfunc.get('items') | map(attribute='Colvol') | list%}
            
            {%set flag = 0 %}
            
            # Filter columns need to be explicitly specified for Multiple Pivot Columns
                      
            {%for fil in filcol %}
            {%if fil == ""%}   
                  {%set flag=1%}                          
                  {{stage('Warning-Filter column values need to be explicitly specified for Multiple Pivot Columns')}}
                    select 1=0 
            {%endif%}
            {%endfor%}      
         
         {%if flag==0 %}
         
            {{ stage('Create Pivot '+ desiredState.node.materializationType) }}      

            CREATE OR REPLACE {{desiredState.node.materializationType}} {{ ref_no_link(desiredState.node.location.name, desiredState.node.name) }}
              AS
             ( 
                SELECT 
                {%for func in functions %}
                       {%for val1 in filcol[ns.i].split(',') %}
                        {% set val = val1.strip() %}
                      {{func}}(${{ns.cnt}}) AS {{func}}_{{val.replace("'", "")}}_{{pcolumn[ns.i]}}
                      {%set ns.cnt = ns.cnt +1%}
                      {%if not loop.last %},{%endif%}
				           {%endfor%}
                   {%set ns.i = ns.i+1%}
                   {%if not loop.last%},{%endif%}
                {%endfor%}
                 FROM
              (SELECT
              {%for col in pcolumn%}
                 {{col}},
                 {{desiredState.config.keyCol.name}} AS {{desiredState.config.keyCol.name}}_{{col}}
                 {%if not loop.last%},{%endif%}
              {%endfor%}
              {{ source.join }})
              {%for col in pcolumn%} 
                PIVOT({{functions[loop.index0]}}({{col}}) FOR {{desiredState.config.keyCol.name}}_{{col}} IN ( 
                {%if filcol[loop.index0] != None %}
                   {{filcol[loop.index0]}}  
                {%else%}
                   ANY ORDER BY {{desiredState.config.keyCol.name}}
                {%endif%}){%if desiredState.config.defvalue == true%} DEFAULT ON NULL ({{desiredState.config.defaultval}}) {%endif%})
			      {%endfor%}
                )
        {%endif%}   
        {%endif%}
{%- else -%}

{{ stage('Nothing to do.') }}
select 1 = 0

{% endif %}